{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.certToPEM = certToPEM;\nexports.rsaPublicKeyToPEM = rsaPublicKeyToPEM;\n\nfunction certToPEM(cert) {\n  cert = cert.match(/.{1,64}/g).join('\\n');\n  cert = '-----BEGIN CERTIFICATE-----\\n' + cert + '\\n-----END CERTIFICATE-----\\n';\n  return cert;\n}\n\n;\n\nfunction prepadSigned(hexStr) {\n  var msb = hexStr[0];\n\n  if (msb < '0' || msb > '7') {\n    return '00' + hexStr;\n  }\n\n  return hexStr;\n}\n\nfunction toHex(number) {\n  var nstr = number.toString(16);\n\n  if (nstr.length % 2) {\n    return '0' + nstr;\n  }\n\n  return nstr;\n}\n\nfunction encodeLengthHex(n) {\n  if (n <= 127) {\n    return toHex(n);\n  }\n\n  var nHex = toHex(n);\n  var lengthOfLengthByte = 128 + nHex.length / 2;\n  return toHex(lengthOfLengthByte) + nHex;\n}\n/*\n * Source: http://stackoverflow.com/questions/18835132/xml-to-pem-in-node-js\n */\n\n\nfunction rsaPublicKeyToPEM(modulusB64, exponentB64) {\n  var modulus = new Buffer(modulusB64, 'base64');\n  var exponent = new Buffer(exponentB64, 'base64');\n  var modulusHex = prepadSigned(modulus.toString('hex'));\n  var exponentHex = prepadSigned(exponent.toString('hex'));\n  var modlen = modulusHex.length / 2;\n  var explen = exponentHex.length / 2;\n  var encodedModlen = encodeLengthHex(modlen);\n  var encodedExplen = encodeLengthHex(explen);\n  var encodedPubkey = '30' + encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) + '02' + encodedModlen + modulusHex + '02' + encodedExplen + exponentHex;\n  var der = new Buffer(encodedPubkey, 'hex').toString('base64');\n  var pem = '-----BEGIN RSA PUBLIC KEY-----\\n';\n  pem += '' + der.match(/.{1,64}/g).join('\\n');\n  pem += '\\n-----END RSA PUBLIC KEY-----\\n';\n  return pem;\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}