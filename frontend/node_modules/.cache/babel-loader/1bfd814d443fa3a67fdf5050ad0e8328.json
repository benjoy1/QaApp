{"ast":null,"code":"'use strict';\n\nvar _jsonwebtoken = require('jsonwebtoken');\n\nvar _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar handleSigningKeyError = function handleSigningKeyError(err, cb) {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.passportJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new _errors.ArgumentError('An options object must be provided when initializing passportJwtSecret');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n  var onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(req, rawJwtToken, cb) {\n    var decoded = _jsonwebtoken2.default.decode(rawJwtToken, {\n      complete: true\n    }); // Only RS256 is supported.\n\n\n    if (!decoded || !decoded.header || decoded.header.alg !== 'RS256') {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(decoded.header.kid, function (err, key) {\n      if (err) {\n        return onError(err, function (newError) {\n          return cb(newError, null);\n        });\n      } // Provide the key.\n\n\n      return cb(null, key.publicKey || key.rsaPublicKey);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}