{"ast":null,"code":"'use strict';\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nvar handleSigningKeyError = function handleSigningKeyError(err, cb) {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null, null, null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err, null, null);\n  }\n};\n/**\n * Call hapiJwt2Key as a Promise\n * @param {object} options \n * @returns {Promise}\n */\n\n\nmodule.exports.hapiJwt2KeyAsync = function (options) {\n  var secretProvider = module.exports.hapiJwt2Key(options);\n  return function (decoded) {\n    return new Promise(function (resolve, reject) {\n      var cb = function cb(err, key) {\n        !key || err ? reject(err) : resolve({\n          key: key\n        });\n      };\n\n      secretProvider(decoded, cb);\n    });\n  };\n};\n\nmodule.exports.hapiJwt2Key = function (options) {\n  if (options === null || options === undefined) {\n    throw new _errors.ArgumentError('An options object must be provided when initializing hapiJwt2Key');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n  var onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(decoded, cb) {\n    // We cannot find a signing certificate if there is no header (no kid).\n    if (!decoded || !decoded.header) {\n      return cb(null, null, null);\n    } // Only RS256 is supported.\n\n\n    if (decoded.header.alg !== 'RS256') {\n      return cb(null, null, null);\n    }\n\n    client.getSigningKey(decoded.header.kid, function (err, key) {\n      if (err) {\n        return onError(err, function (newError) {\n          return cb(newError, null, null);\n        });\n      } // Provide the key.\n\n\n      return cb(null, key.publicKey || key.rsaPublicKey, key);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}