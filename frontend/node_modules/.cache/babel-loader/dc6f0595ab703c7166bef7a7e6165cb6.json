{"ast":null,"code":"var jwt = require('jsonwebtoken');\n\nvar UnauthorizedError = require('./errors/UnauthorizedError');\n\nvar unless = require('express-unless');\n\nvar async = require('async');\n\nvar set = require('lodash.set');\n\nvar DEFAULT_REVOKED_FUNCTION = function (_, __, cb) {\n  return cb(null, false);\n};\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nfunction wrapStaticSecretInCallback(secret) {\n  return function (_, __, cb) {\n    return cb(null, secret);\n  };\n}\n\nmodule.exports = function (options) {\n  if (!options || !options.secret) throw new Error('secret should be set');\n  var secretCallback = options.secret;\n\n  if (!isFunction(secretCallback)) {\n    secretCallback = wrapStaticSecretInCallback(secretCallback);\n  }\n\n  var isRevokedCallback = options.isRevoked || DEFAULT_REVOKED_FUNCTION;\n\n  var _requestProperty = options.userProperty || options.requestProperty || 'user';\n\n  var _resultProperty = options.resultProperty;\n  var credentialsRequired = typeof options.credentialsRequired === 'undefined' ? true : options.credentialsRequired;\n\n  var middleware = function (req, res, next) {\n    var token;\n\n    if (req.method === 'OPTIONS' && req.headers.hasOwnProperty('access-control-request-headers')) {\n      var hasAuthInAccessControl = !!~req.headers['access-control-request-headers'].split(',').map(function (header) {\n        return header.trim();\n      }).indexOf('authorization');\n\n      if (hasAuthInAccessControl) {\n        return next();\n      }\n    }\n\n    if (options.getToken && typeof options.getToken === 'function') {\n      try {\n        token = options.getToken(req);\n      } catch (e) {\n        return next(e);\n      }\n    } else if (req.headers && req.headers.authorization) {\n      var parts = req.headers.authorization.split(' ');\n\n      if (parts.length == 2) {\n        var scheme = parts[0];\n        var credentials = parts[1];\n\n        if (/^Bearer$/i.test(scheme)) {\n          token = credentials;\n        } else {\n          if (credentialsRequired) {\n            return next(new UnauthorizedError('credentials_bad_scheme', {\n              message: 'Format is Authorization: Bearer [token]'\n            }));\n          } else {\n            return next();\n          }\n        }\n      } else {\n        return next(new UnauthorizedError('credentials_bad_format', {\n          message: 'Format is Authorization: Bearer [token]'\n        }));\n      }\n    }\n\n    if (!token) {\n      if (credentialsRequired) {\n        return next(new UnauthorizedError('credentials_required', {\n          message: 'No authorization token was found'\n        }));\n      } else {\n        return next();\n      }\n    }\n\n    var dtoken;\n\n    try {\n      dtoken = jwt.decode(token, {\n        complete: true\n      }) || {};\n    } catch (err) {\n      return next(new UnauthorizedError('invalid_token', err));\n    }\n\n    async.waterfall([function getSecret(callback) {\n      var arity = secretCallback.length;\n\n      if (arity == 4) {\n        secretCallback(req, dtoken.header, dtoken.payload, callback);\n      } else {\n        // arity == 3\n        secretCallback(req, dtoken.payload, callback);\n      }\n    }, function verifyToken(secret, callback) {\n      jwt.verify(token, secret, options, function (err, decoded) {\n        if (err) {\n          callback(new UnauthorizedError('invalid_token', err));\n        } else {\n          callback(null, decoded);\n        }\n      });\n    }, function checkRevoked(decoded, callback) {\n      isRevokedCallback(req, dtoken.payload, function (err, revoked) {\n        if (err) {\n          callback(err);\n        } else if (revoked) {\n          callback(new UnauthorizedError('revoked_token', {\n            message: 'The token has been revoked.'\n          }));\n        } else {\n          callback(null, decoded);\n        }\n      });\n    }], function (err, result) {\n      if (err) {\n        return next(err);\n      }\n\n      if (_resultProperty) {\n        set(res, _resultProperty, result);\n      } else {\n        set(req, _requestProperty, result);\n      }\n\n      next();\n    });\n  };\n\n  middleware.unless = unless;\n  middleware.UnauthorizedError = UnauthorizedError;\n  return middleware;\n};\n\nmodule.exports.UnauthorizedError = UnauthorizedError;","map":null,"metadata":{},"sourceType":"script"}