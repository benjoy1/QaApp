{"ast":null,"code":"import auth0 from 'auth0-js';\nimport { resolve } from 'dns';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'dev-mo7y2b55.auth0.com',\n      audience: 'https://dev-mo7y2b55.auth0.com/userinfo',\n      clientID: 'AnO6xrl4mziYypCFdIVKifjUBAr7HLpU',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    return this.profile;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  isAuthenticated() {\n    return new Date.getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n\n        this.idToken = authResult.idToken;\n        this.profile = authResult.idTokenPayload; // set the time that the id token will expire at\n\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\n        resolve();\n      });\n    });\n  }\n\n  signOut() {\n    // clear id token, profile, and expiration\n    this.idToke = null;\n    this.profile = null;\n    this.expiresAt = null;\n  }\n\n}\n\nconst auth0Client = new Auth();\nexport default auth0Client;","map":{"version":3,"sources":["/Users/sc-bjoyce-osx/training/qa-app/frontend/src/Auth.js"],"names":["auth0","resolve","Auth","constructor","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","getIdToken","idToken","Date","getTime","expiresAt","authorize","Promise","reject","parseHash","err","authResult","idTokenPayload","exp","idToke","auth0Client"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,OAAT,QAAwB,KAAxB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AACV,SAAKH,KAAL,GAAa,IAAIA,KAAK,CAACI,OAAV,CAAkB;AAC3B;AACAC,MAAAA,MAAM,EAAE,wBAFmB;AAG3BC,MAAAA,QAAQ,EAAE,yCAHiB;AAI3BC,MAAAA,QAAQ,EAAE,kCAJiB;AAK3BC,MAAAA,WAAW,EAAE,gCALc;AAM3BC,MAAAA,YAAY,EAAE,UANa;AAO3BC,MAAAA,KAAK,EAAE;AAPoB,KAAlB,CAAb;AAUA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAf;AACH;;AAEDD,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKM,OAAZ;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKC,OAAZ;AACH;;AAEDL,EAAAA,eAAe,GAAG;AACd,WAAO,IAAIM,IAAI,CAACC,OAAT,KAAqB,KAAKC,SAAjC;AACH;;AAEDP,EAAAA,MAAM,GAAG;AACL,SAAKf,KAAL,CAAWuB,SAAX;AACH;;AAEDV,EAAAA,oBAAoB,GAAG;AACnB,WAAO,IAAIW,OAAJ,CAAY,CAACvB,OAAD,EAAUwB,MAAV,KAAqB;AACpC,WAAKzB,KAAL,CAAW0B,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;;AACT,YAAI,CAACC,UAAD,IAAe,CAACA,UAAU,CAACT,OAA/B,EAAwC;AACpC,iBAAOM,MAAM,CAACE,GAAD,CAAb;AACH;;AACD,aAAKR,OAAL,GAAeS,UAAU,CAACT,OAA1B;AACA,aAAKF,OAAL,GAAeW,UAAU,CAACC,cAA1B,CANsC,CAOtC;;AACA,aAAKP,SAAL,GAAiBM,UAAU,CAACC,cAAX,CAA0BC,GAA1B,GAAgC,IAAjD;AACA7B,QAAAA,OAAO;AACV,OAVD;AAWH,KAZM,CAAP;AAaH;;AAEDe,EAAAA,OAAO,GAAG;AACN;AACA,SAAKe,MAAL,GAAc,IAAd;AACA,SAAKd,OAAL,GAAe,IAAf;AACA,SAAKK,SAAL,GAAiB,IAAjB;AACH;;AAxDM;;AA2DX,MAAMU,WAAW,GAAG,IAAI9B,IAAJ,EAApB;AAEA,eAAe8B,WAAf","sourcesContent":["import auth0 from 'auth0-js';\nimport { resolve } from 'dns';\n\nclass Auth {\n    constructor() {\n        this.auth0 = new auth0.WebAuth({\n            // the following three lines MUST be updated\n            domain: 'dev-mo7y2b55.auth0.com',\n            audience: 'https://dev-mo7y2b55.auth0.com/userinfo',\n            clientID: 'AnO6xrl4mziYypCFdIVKifjUBAr7HLpU',\n            redirectUri: 'http://localhost:3000/callback',\n            responseType: 'id_token',\n            scope: 'openid profile'\n        });\n\n        this.getProfile = this.getProfile.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n        this.signIn = this.signIn.bind(this);\n        this.signOut = this.signOut.bind(this);\n    }\n\n    getProfile() {\n        return this.profile;\n    }\n\n    getIdToken() {\n        return this.idToken;\n    }\n\n    isAuthenticated() {\n        return new Date.getTime() < this.expiresAt;\n    }\n\n    signIn() {\n        this.auth0.authorize();\n    }\n\n    handleAuthentication() {\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash((err, authResult) => {\n                if (err) return reject(err);\n                if (!authResult || !authResult.idToken) {\n                    return reject(err);\n                }\n                this.idToken = authResult.idToken;\n                this.profile = authResult.idTokenPayload;\n                // set the time that the id token will expire at\n                this.expiresAt = authResult.idTokenPayload.exp * 1000;\n                resolve();\n            })\n        })\n    }\n\n    signOut() {\n        // clear id token, profile, and expiration\n        this.idToke = null;\n        this.profile = null;\n        this.expiresAt = null;\n    }\n}\n\nconst auth0Client = new Auth();\n\nexport default auth0Client;"]},"metadata":{},"sourceType":"module"}